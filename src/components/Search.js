import React from 'react';
import { connect } from 'react-redux'
import '../css/search.css'
import axios from 'axios'
import { Link } from 'react-router-dom'
import notFoundImg from '../img/kangaroo.ad18ec6c.png'
class Search extends React.Component{
  constructor(){
    super()
    this.state = {
      focus:false,
      val:'',
      history:[]
    }
    this.search = this.search.bind(this)
  }
  componentWillMount(){
    this.props.dispatch({type:'CHANGEHEADERVSL',headerval:'搜索'})
    if (!localStorage.searchhistory) {
      localStorage.searchhistory = JSON.stringify([])
    }else{
      this.setState({history:JSON.parse(localStorage.searchhistory)})
    }
  }
  history(){
    if(this.input.value){
      if(localStorage.searchhistory.length){
        let searchhistory =JSON.parse(localStorage.searchhistory)
        let index
        for(let i=0;i<searchhistory.length;i++){
          if(searchhistory[i]===this.input.value){
            index = i
          }
        }
        if(index){
          searchhistory.splice(index,1)
        }
        localStorage.searchhistory = JSON.stringify([this.input.value,...searchhistory])
        this.setState({history:[this.input.value,...searchhistory]})
      }else{
        localStorage.searchhistory = JSON.stringify([this.input.value])
        this.setState({history:[this.input.value]})
      }

    }else{
      alert('请输入店铺或商品名称')
    }
  }
  search(){
    let sea = {key:this.input.value.trim()}
    this.input.value ? this.setState({focus:true}) : this.setState({focus:false})
    if(sea.key){
      this.setState({val:sea.key})
      axios.post('http://petapi.haoduoshipin.com/shop/search',sea)
      .then(res => this.props.dispatch({type:'SEARCHGOOD',commodity:res.data.shops}))
    }else{
      this.props.dispatch({type:'SEARCHGOOD',commodity:''})
      this.setState({val:''})
    }
  }
  handleClickLi(item){
    this.input.value=item
    this.search()
    this.input.focus()
    let searchhistory =JSON.parse(localStorage.searchhistory)
    let index
    for(let i=0;i<searchhistory.length;i++){
      if(searchhistory[i]===this.input.value){
        index = i
      }
    }
    let del = searchhistory.splice(index,1)
    localStorage.searchhistory = JSON.stringify([...del,...searchhistory])
    this.setState({history:[...del,...searchhistory]})
  }

  render(){
    let shop = this.props.shop
    var sRex = this.state.val
    var reg = new RegExp(sRex,'g')
    return (
      <div>
        <div className="search">
          <svg viewBox="0 0 1024 1024"><path fill="#707070" d="M955.894368 904.307967l-129.891326-107.72242c26.882254-33.67803 48.734958-71.095221 65.138556-111.682615 22.150486-54.806233 33.381271-112.992447 33.381271-172.944887 0-59.95244-11.231809-118.139677-33.381271-172.944887-21.423939-53.007261-52.107775-100.627838-91.201142-141.53962-39.187511-41.010019-84.857667-73.223698-135.743614-95.747691-52.798507-23.370267-108.87978-35.220153-166.69044-35.220153s-113.892957 11.849886-166.692486 35.220153c-50.885947 22.523993-96.557126 54.738695-135.743614 95.747691-39.09439 40.911782-69.778226 88.532359-91.203188 141.53962-22.150486 54.80521-33.381271 112.992447-33.381271 172.944887 0 59.95244 11.231809 118.140701 33.381271 172.944887 21.424962 53.007261 52.108798 100.626815 91.203188 141.538597 39.186488 41.008996 84.85869 73.223698 135.743614 95.746668 52.79953 23.370267 108.881826 35.220153 166.692486 35.220153s113.891933-11.849886 166.69044-35.220153c44.316322-19.615757 84.672448-46.587038 120.239502-80.311117l132.264373 109.689215c5.730515 4.753257 12.674671 7.070023 19.579941 7.070023 8.820899 0 17.576307-3.78214 23.64656-11.103896C970.75175 934.484244 968.945615 915.130454 955.894368 904.307967zM497.507426 896.011001c-201.604624 0-365.622188-172.284855-365.622188-384.052956s164.017564-384.053979 365.622188-384.053979c201.602577 0 365.618095 172.285878 365.618095 384.053979S699.110003 896.011001 497.507426 896.011001z" /></svg>
          <input placeholder="输入商家、商品名" onChange={this.search} ref={input => this.input=input}/>
          {this.state.focus ? <div onClick={()=> {
              this.input.value=''
              this.setState({focus:false,val:''})
              this.props.dispatch({type:'SEARCHGOOD',commodity:''})
            }}>
              <svg viewBox="0 0 1024 1024"><path fill="#707070" d="M510.783289 62.331627c-246.300592 0-447.817212 201.514573-447.817212 447.817212 0 246.300592 201.51662 447.815165 447.817212 447.815165s447.817212-201.514573 447.817212-447.815165C958.600501 263.8462 757.083881 62.331627 510.783289 62.331627L510.783289 62.331627 510.783289 62.331627 510.783289 62.331627zM697.369871 644.496663c14.927991 14.927991 14.927991 37.316907 0 52.238758-14.919804 14.927991-37.307697 14.927991-52.236712 0l-134.349871-134.341684-134.349871 134.341684c-14.919804 14.927991-37.307697 14.927991-52.244898 0-14.921851-14.921851-14.921851-37.310767 0-52.238758l134.347824-134.347824-134.347824-134.349871c-14.921851-14.918781-14.921851-37.307697 0-52.246945 14.937201-14.919804 37.325094-14.919804 52.244898 0l134.349871 134.349871 134.349871-134.349871c14.927991-14.919804 37.316907-14.919804 52.236712 0 14.927991 14.939247 14.927991 37.328164 0 52.246945l-134.341684 134.349871L697.369871 644.496663 697.369871 644.496663 697.369871 644.496663 697.369871 644.496663zM697.369871 644.496663" /></svg>
            </div> : null}
          <button onClick={this.history.bind(this)}>搜索</button>
        </div>
        {
          this.state.history.length && !this.state.val ?
          <div className="history">
            <p>历史记录</p>
            <ul>
              {
                this.state.history.map(item => {
                  return (
                    <li key={Math.random()*Math.random()} onClick={this.handleClickLi.bind(this,item)}>
                      <svg viewBox="0 0 1024 1024"><path fill="#707070" d="M947.177334 420.854117c-5.836939-28.492938-14.550391-56.626695-25.975605-83.667561-11.203156-26.418696-25.007557-51.882648-41.079604-75.659167-15.989159-23.651676-34.274618-45.837978-54.385655-65.921385-20.083407-20.097734-42.269709-38.396495-65.921385-54.385655-23.763217-16.058744-49.212842-29.876448-75.686796-41.09393-26.998911-11.410887-55.132668-20.138666-83.597977-25.934672-58.618049-12.033058-121.081683-12.019755-179.520653-0.014326-28.452006 5.794983-56.599066 14.522762-83.695191 25.962302-26.418696 11.189853-51.868321 25.007557-75.67247 41.079604-23.568788 15.933901-45.740764 34.233686-65.893756 54.385655-12.434194 12.434194-23.861454 25.845645-34.757618 39.667441L160.990624 121.772414c0-11.124362-9.020444-20.140713-20.142759-20.140713l-14.294564 0c-11.127432 0-20.143783 9.016351-20.143783 20.140713l0 150.538575c0 2.326998 0.415462 4.552689 1.140986 6.632047-0.727571 2.098801-1.140986 4.342912-1.140986 6.689353l0 13.644765c0 11.302417 9.163707 20.469194 20.469194 20.469194l167.214373 0c11.30344 0 20.469194-9.166777 20.469194-20.469194l0-13.644765c0-11.307533-9.163707-20.472264-20.469194-20.472264l-84.791152 0c8.359388-10.251481 17.161868-20.148899 26.503631-29.497824 17.60803-17.60803 36.972053-33.582863 57.553811-47.497781 20.775162-14.025435 42.989093-26.086122 66.031902-35.83823 23.596418-9.972119 48.134277-17.5804 72.976058-22.642696 51.010791-10.484795 105.646132-10.498098 156.795069 0.014326 24.841781 5.062296 49.378617 12.669554 72.9208 22.615067 23.071462 9.765411 45.284369 21.826098 66.031902 35.851533 20.637016 13.95585 40.028669 29.931706 57.567113 47.512107 17.566074 17.538445 33.527604 36.902468 47.497781 57.567113 14.025435 20.760836 26.086122 42.974767 35.851533 66.018599 9.931187 23.568788 17.566074 48.119951 22.655999 72.934103 5.228071 25.712615 7.883551 52.103682 7.883551 78.452793 0 26.321482-2.65548 52.712549-7.883551 78.384231-5.089925 24.814152-12.724813 49.378617-22.655999 72.948429-9.765411 23.016203-21.826098 45.229111-35.879162 66.031902-13.942547 20.664645-29.904077 40.028669-47.497781 57.567113-17.510816 17.566074-36.874839 33.555234-57.539484 47.52541-20.719904 13.970176-42.933835 26.030863-66.004273 35.823903-23.51353 9.931187-48.051389 17.566074-72.9208 22.683628-51.315736 10.429537-105.72902 10.429537-156.809395 0-24.89704-5.117554-49.448202-12.752442-72.961732-22.683628-23.099091-9.79304-45.326325-21.826098-66.046229-35.823903-20.609387-13.942547-39.97341-29.931706-57.567113-47.52541-17.60803-17.593703-33.582863-36.957727-47.497781-57.567113-14.025435-20.747533-26.086122-42.961464-35.83823-66.004273-9.94449-23.568788-17.566074-48.134277-22.642696-73.003687-5.242398-25.533536-7.897877-51.895951-7.897877-78.356602 0-15.643282-12.68388-28.327162-28.327162-28.327162s-28.327162 12.68388-28.327162 28.327162c0 30.305213 3.043313 60.485583 9.046027 89.725534 5.822612 28.492938 14.550391 56.654324 25.962302 83.681888 11.203156 26.446325 25.021883 51.895951 41.066301 75.659167 15.933901 23.596418 34.233686 45.782719 54.385655 65.921385 20.138666 20.138666 42.324968 38.451754 65.921385 54.413284 23.74889 16.016789 49.212842 29.848819 75.686796 41.051975 26.957978 11.397584 55.091736 20.138666 83.667561 26.003234 29.337165 5.975085 59.531861 9.018398 89.753163 9.018398 30.18037 0 60.389392-3.043313 89.795119-9.018398 28.548196-5.892197 56.681954-14.634302 83.597977-26.003234 26.473955-11.203156 51.92358-25.035186 75.659167-41.079604 23.680329-15.989159 45.865607-34.274618 65.921385-54.358025 20.111037-20.083407 38.396495-42.269709 54.358025-65.949015 16.099676-23.790846 29.931706-49.240471 41.107233-75.686796 11.425214-27.02654 20.138666-55.160297 25.975605-83.654258 6.002714-29.433356 9.046027-59.614749 9.046027-89.725534C956.223361 480.509798 953.181071 450.301799 947.177334 420.854117zM510.744403 596.940554l104.295368 0c23.811312 0 43.13031-19.321044 43.13031-43.168172 0-23.813359-19.318998-43.134403-43.13031-43.134403l-61.142545 0L553.897226 355.122043c0-23.847128-19.317974-43.168172-43.163055-43.168172-23.811312 0-43.13031 19.321044-43.13031 43.168172l0 197.798948c0 0.105401 0.030699 0.202615 0.030699 0.305969-0.002047 0.186242-0.055259 0.358157-0.055259 0.544399C467.579301 577.61951 486.898299 596.940554 510.744403 596.940554z" /></svg>
                      <p>{item}</p>
                    </li>
                  )
                })
              }
            </ul>
            <div onClick={()=>{
              localStorage.searchhistory = JSON.stringify([])
              this.setState({history:''})
            }}>清除历史记录</div>
          </div> : null
        }

        <ul className="shopList">
          {
            shop.length ? shop.map(item => {
              return (
                <li key={item._id}>
                  <Link to={{ pathname: `/commodity/${item._id}`, title: item.name }} onClick={()=>{
                    this.props.dispatch({type:'SEARCHGOOD',commodity:''})
                    this.history()
                  }}>
                    <div><img src={item.poster ? item.poster : "https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3011329581,2931078622&fm=117&gp=0.jpg"} alt="img"/></div>
                    <p dangerouslySetInnerHTML={{__html: item.name.replace(reg,`<span>${this.state.val}</span>`)}} />
                    <svg viewBox="0 0 1024 1024"><path fill="#707070" d="M679.374008 511.753383 280.140305 112.531959c-11.102872-11.090593-11.102872-29.109991 0-40.177048 11.090593-11.109012 29.092595-11.109012 40.188304 0l414.455383 414.450267c2.229784 1.246387 4.973268 0.947582 6.874571 2.843768 6.076392 6.076392 8.508791 14.167674 7.936763 22.103414 0.572028 7.941879-1.860371 16.034185-7.936763 22.097274-1.902326 1.908466-4.650927 1.603521-6.886851 2.856048L320.329633 951.169251c-11.096732 11.084453-29.097712 11.084453-40.188304 0-11.102872-11.114129-11.102872-29.091572 0-40.200584L679.374008 511.753383z" /></svg>
                  </Link>
                </li>
              )
            }) : this.state.val ?
            <div className="notFound">
              <img src="http://xs01.meituan.net/waimai_i/img/kangaroo.ad18ec6c.png" alt="img" />
              <p>没有找到相关的商家或商品</p>
            </div> : null
          }
        </ul>
      </div>
    )
  }
}
const mapStateToProps = (state) => ({
  shop:state.shop
})
export default connect(mapStateToProps)(Search)
